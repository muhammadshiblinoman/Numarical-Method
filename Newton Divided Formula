#include <bits/stdc++.h>
using namespace std;

class NewtonDivided {
private:
    int n;
    vector<double>x;
    vector<vector<double>> ddTable;

public:
    NewtonDivided(int points, vector<vector<double>>&y, vector<double>&xx) {
        n = points;
        ddTable = y;
        x = xx;
    }

    void computeDividedDifference() {
        for (int j = 1; j < n; j++) {
            for (int i = 0; i < n - j; i++) {
                ddTable[i][j] = (ddTable[i + 1][j - 1] - ddTable[i][j - 1]) / (x[i + j] - x[i]);
            }
        }
    }

    double evaluate(double value) {
        double result = ddTable[0][0];
        double term;

        for (int i = 1; i < n; i++) {
            term = ddTable[0][i];
            for (int j = 0; j < i; j++) {
                term *= (value - x[j]);
            }
            result += term;
        }
        return result;
    }
};

int main() {
    int n;
    cin >> n;

    vector<double> x(n);
    vector<vector<double>> y(n, vector<double>(n, 0.0));

    for (int i = 0; i < n; i++) {
        cin >> x[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> y[i][0];
    }

    NewtonDivided newton(n, y, x);
    newton.computeDividedDifference();

    double value;
    cin >> value;

    double result = newton.evaluate(value);
    cout << "The value of the polynomial at x = " << value << " is " << result << '\n';
}
